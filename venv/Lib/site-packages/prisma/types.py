# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str


class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]


_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AccountCreateOrConnectWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'
    # connectOrCreate: 'AccountCreateOrConnectWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class EmailAccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class EmailAccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class EmailAccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class EmailAccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class EmailAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyEmailAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class AccIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class AccIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class AccIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class AccIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime


class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]


_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SessionCreateOrConnectWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'
    # connectOrCreate: 'SessionCreateOrConnectWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class EmailAccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class EmailAccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class EmailAccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class EmailAccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class EmailAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyEmailAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class AccIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class AccIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class AccIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class AccIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    emailAccounts: 'EmailAccountCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    emailAccounts: 'EmailAccountUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromUser']


    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class EmailAccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class EmailAccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class EmailAccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class EmailAccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class EmailAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyEmailAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class AccIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class AccIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class AccIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class AccIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    emailAccounts: 'EmailAccountListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    emailAccounts: 'EmailAccountListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    emailAccounts: 'EmailAccountListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    emailAccounts: 'EmailAccountListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    emailAccounts: 'EmailAccountListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'emailVerified': bool,
        'image': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'emailVerified': int,
        'image': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'accounts',
    'sessions',
    'emailAccounts',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'accounts',
        'sessions',
        'emailAccounts',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""
    id: _str


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    identifier: _str
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""
    id: _str


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]


_VerificationTokenWhereUnique_id_Input = TypedDict(
    '_VerificationTokenWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKeyInner = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKeyInner',
    {
        'identifier': '_str',
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKey = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKey',
    {
        'identifier_token': '_VerificationTokenCompoundidentifier_tokenKeyInner',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_id_Input',
    '_VerificationTokenWhereUnique_token_Input',
    '_VerificationTokenCompoundidentifier_tokenKey',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['VerificationTokenCreateOrConnectWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'
    # connectOrCreate: 'VerificationTokenCreateOrConnectWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_id_OrderByInput = TypedDict(
    '_VerificationToken_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_VerificationToken_identifier_OrderByInput = TypedDict(
    '_VerificationToken_identifier_OrderByInput',
    {
        'identifier': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_OrderByInput = TypedDict(
    '_VerificationToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_id_OrderByInput',
    '_VerificationToken_identifier_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_expires_OrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""


    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class EmailAccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class EmailAccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class EmailAccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class EmailAccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class EmailAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyEmailAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class AccIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class AccIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class AccIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class AccIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    id: _str
    identifier: _str
    token: _str
    expires: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    id: _str
    identifier: _str
    token: _str
    expires: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    id: bool
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    id: bool
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'id': bool,
        'identifier': bool,
        'token': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'id': int,
        'identifier': int,
        'token': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'id',
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeys = Literal[
    'id',
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = _NoneType

# EmailAccount types

class EmailAccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the EmailAccount create method"""
    id: _str
    port: Optional[_int]
    stmp_server: Optional[_str]
    smtp_username: Optional[_str]
    smtp_password: Optional[_str]
    email: Optional[_str]
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class EmailAccountCreateInput(EmailAccountOptionalCreateInput):
    """Required arguments to the EmailAccount create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EmailAccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the EmailAccount create method, without relations"""
    id: _str
    port: Optional[_int]
    stmp_server: Optional[_str]
    smtp_username: Optional[_str]
    smtp_password: Optional[_str]
    email: Optional[_str]
    userId: _str


class EmailAccountCreateWithoutRelationsInput(EmailAccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the EmailAccount create method, without relations"""


class EmailAccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EmailAccountCreateWithoutRelationsInput'
    connect: 'EmailAccountWhereUniqueInput'


class EmailAccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EmailAccountCreateWithoutRelationsInput', List['EmailAccountCreateWithoutRelationsInput']]
    connect: Union['EmailAccountWhereUniqueInput', List['EmailAccountWhereUniqueInput']]


_EmailAccountWhereUnique_id_Input = TypedDict(
    '_EmailAccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EmailAccountWhereUniqueInput = _EmailAccountWhereUnique_id_Input


class EmailAccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    port: Optional[Union[AtomicIntInput, _int]]
    stmp_server: Optional[_str]
    smtp_username: Optional[_str]
    smtp_password: Optional[_str]
    email: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class EmailAccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    port: Optional[Union[AtomicIntInput, _int]]
    stmp_server: Optional[_str]
    smtp_username: Optional[_str]
    smtp_password: Optional[_str]
    email: Optional[_str]


class EmailAccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EmailAccountCreateWithoutRelationsInput']
    connect: List['EmailAccountWhereUniqueInput']
    set: List['EmailAccountWhereUniqueInput']
    disconnect: List['EmailAccountWhereUniqueInput']
    delete: List['EmailAccountWhereUniqueInput']

    # TODO
    # update: List['EmailAccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EmailAccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EmailAccountScalarWhereInput']
    # upsert: List['EmailAccountUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['EmailAccountCreateOrConnectWithoutRelationsInput']


class EmailAccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EmailAccountCreateWithoutRelationsInput'
    connect: 'EmailAccountWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EmailAccountUpdateInput'
    # upsert: 'EmailAccountUpsertWithoutRelationsInput'
    # connectOrCreate: 'EmailAccountCreateOrConnectWithoutRelationsInput'


class EmailAccountUpsertInput(TypedDict):
    create: 'EmailAccountCreateInput'
    update: 'EmailAccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_EmailAccount_id_OrderByInput = TypedDict(
    '_EmailAccount_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_EmailAccount_port_OrderByInput = TypedDict(
    '_EmailAccount_port_OrderByInput',
    {
        'port': 'SortOrder',
    },
    total=True
)

_EmailAccount_stmp_server_OrderByInput = TypedDict(
    '_EmailAccount_stmp_server_OrderByInput',
    {
        'stmp_server': 'SortOrder',
    },
    total=True
)

_EmailAccount_smtp_username_OrderByInput = TypedDict(
    '_EmailAccount_smtp_username_OrderByInput',
    {
        'smtp_username': 'SortOrder',
    },
    total=True
)

_EmailAccount_smtp_password_OrderByInput = TypedDict(
    '_EmailAccount_smtp_password_OrderByInput',
    {
        'smtp_password': 'SortOrder',
    },
    total=True
)

_EmailAccount_email_OrderByInput = TypedDict(
    '_EmailAccount_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_EmailAccount_userId_OrderByInput = TypedDict(
    '_EmailAccount_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

EmailAccountOrderByInput = Union[
    '_EmailAccount_id_OrderByInput',
    '_EmailAccount_port_OrderByInput',
    '_EmailAccount_stmp_server_OrderByInput',
    '_EmailAccount_smtp_username_OrderByInput',
    '_EmailAccount_smtp_password_OrderByInput',
    '_EmailAccount_email_OrderByInput',
    '_EmailAccount_userId_OrderByInput',
]



# recursive EmailAccount types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EmailAccountRelationFilter = TypedDict(
    'EmailAccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EmailAccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EmailAccountInclude(TypedDict, total=False):
    """EmailAccount relational arguments"""
    user: Union[bool, 'UserArgsFromEmailAccount']


    

class AccountIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive1']


class AccountIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive2']


class AccountIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive3']


class AccountIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive4']


class AccountIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class AccountArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManyAccountArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive1']


class SessionIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive2']


class SessionIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive3']


class SessionIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive4']


class SessionIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class SessionArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManySessionArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    accounts: Union[bool, 'FindManyAccountArgsFromEmailAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromEmailAccountRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromEmailAccountRecursive1']


class UserIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    accounts: Union[bool, 'FindManyAccountArgsFromEmailAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromEmailAccountRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromEmailAccountRecursive2']


class UserIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    accounts: Union[bool, 'FindManyAccountArgsFromEmailAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromEmailAccountRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromEmailAccountRecursive3']


class UserIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    accounts: Union[bool, 'FindManyAccountArgsFromEmailAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromEmailAccountRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromEmailAccountRecursive4']


class UserIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class UserArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManyUserArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class VerificationTokenIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class VerificationTokenIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class VerificationTokenIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class VerificationTokenIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class VerificationTokenArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManyVerificationTokenArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive1']


class EmailAccountIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive2']


class EmailAccountIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive3']


class EmailAccountIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""
    user: Union[bool, 'UserArgsFromEmailAccountRecursive4']


class EmailAccountIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class EmailAccountArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManyEmailAccountArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromEmailAccount(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class AccIncludeFromEmailAccountRecursive1(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class AccIncludeFromEmailAccountRecursive2(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class AccIncludeFromEmailAccountRecursive3(TypedDict, total=False):
    """Relational arguments for EmailAccount"""


class AccIncludeFromEmailAccountRecursive4(TypedDict, total=False):
    """Relational arguments for EmailAccount"""

    

class AccArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    
    

class FindManyAccArgsFromEmailAccount(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromEmailAccountRecursive1(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromEmailAccountRecursive2(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromEmailAccountRecursive3(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromEmailAccountRecursive4(TypedDict, total=False):
    """Arguments for EmailAccount"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManyEmailAccountArgs = FindManyEmailAccountArgsFromEmailAccount
FindFirstEmailAccountArgs = FindManyEmailAccountArgsFromEmailAccount


    

class EmailAccountWhereInput(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    port: Union[None, _int, 'types.IntFilter']
    stmp_server: Union[None, _str, 'types.StringFilter']
    smtp_username: Union[None, _str, 'types.StringFilter']
    smtp_password: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['EmailAccountWhereInputRecursive1', List['EmailAccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EmailAccountWhereInputRecursive1']
    OR: List['EmailAccountWhereInputRecursive1']
    NOT: List['EmailAccountWhereInputRecursive1']


class EmailAccountWhereInputRecursive1(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    port: Union[None, _int, 'types.IntFilter']
    stmp_server: Union[None, _str, 'types.StringFilter']
    smtp_username: Union[None, _str, 'types.StringFilter']
    smtp_password: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['EmailAccountWhereInputRecursive2', List['EmailAccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EmailAccountWhereInputRecursive2']
    OR: List['EmailAccountWhereInputRecursive2']
    NOT: List['EmailAccountWhereInputRecursive2']


class EmailAccountWhereInputRecursive2(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    port: Union[None, _int, 'types.IntFilter']
    stmp_server: Union[None, _str, 'types.StringFilter']
    smtp_username: Union[None, _str, 'types.StringFilter']
    smtp_password: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['EmailAccountWhereInputRecursive3', List['EmailAccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EmailAccountWhereInputRecursive3']
    OR: List['EmailAccountWhereInputRecursive3']
    NOT: List['EmailAccountWhereInputRecursive3']


class EmailAccountWhereInputRecursive3(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    port: Union[None, _int, 'types.IntFilter']
    stmp_server: Union[None, _str, 'types.StringFilter']
    smtp_username: Union[None, _str, 'types.StringFilter']
    smtp_password: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['EmailAccountWhereInputRecursive4', List['EmailAccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EmailAccountWhereInputRecursive4']
    OR: List['EmailAccountWhereInputRecursive4']
    NOT: List['EmailAccountWhereInputRecursive4']


class EmailAccountWhereInputRecursive4(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    port: Union[None, _int, 'types.IntFilter']
    stmp_server: Union[None, _str, 'types.StringFilter']
    smtp_username: Union[None, _str, 'types.StringFilter']
    smtp_password: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate EmailAccount types


    

class EmailAccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    port: Union[_int, 'types.IntWithAggregatesFilter']
    stmp_server: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_username: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_password: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailAccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['EmailAccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EmailAccountScalarWhereWithAggregatesInputRecursive1']


class EmailAccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    port: Union[_int, 'types.IntWithAggregatesFilter']
    stmp_server: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_username: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_password: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailAccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['EmailAccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EmailAccountScalarWhereWithAggregatesInputRecursive2']


class EmailAccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    port: Union[_int, 'types.IntWithAggregatesFilter']
    stmp_server: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_username: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_password: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailAccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['EmailAccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EmailAccountScalarWhereWithAggregatesInputRecursive3']


class EmailAccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    port: Union[_int, 'types.IntWithAggregatesFilter']
    stmp_server: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_username: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_password: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailAccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['EmailAccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EmailAccountScalarWhereWithAggregatesInputRecursive4']


class EmailAccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """EmailAccount arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    port: Union[_int, 'types.IntWithAggregatesFilter']
    stmp_server: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_username: Union[_str, 'types.StringWithAggregatesFilter']
    smtp_password: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class EmailAccountGroupByOutput(TypedDict, total=False):
    id: _str
    port: _int
    stmp_server: _str
    smtp_username: _str
    smtp_password: _str
    email: _str
    userId: _str
    _sum: 'EmailAccountSumAggregateOutput'
    _avg: 'EmailAccountAvgAggregateOutput'
    _min: 'EmailAccountMinAggregateOutput'
    _max: 'EmailAccountMaxAggregateOutput'
    _count: 'EmailAccountCountAggregateOutput'


class EmailAccountAvgAggregateOutput(TypedDict, total=False):
    """EmailAccount output for aggregating averages"""
    port: float


class EmailAccountSumAggregateOutput(TypedDict, total=False):
    """EmailAccount output for aggregating sums"""
    port: _int


class EmailAccountScalarAggregateOutput(TypedDict, total=False):
    """EmailAccount output including scalar fields"""
    id: _str
    port: _int
    stmp_server: _str
    smtp_username: _str
    smtp_password: _str
    email: _str
    userId: _str


EmailAccountMinAggregateOutput = EmailAccountScalarAggregateOutput
EmailAccountMaxAggregateOutput = EmailAccountScalarAggregateOutput


class EmailAccountMaxAggregateInput(TypedDict, total=False):
    """EmailAccount input for aggregating by max"""
    id: bool
    port: bool
    stmp_server: bool
    smtp_username: bool
    smtp_password: bool
    email: bool
    userId: bool


class EmailAccountMinAggregateInput(TypedDict, total=False):
    """EmailAccount input for aggregating by min"""
    id: bool
    port: bool
    stmp_server: bool
    smtp_username: bool
    smtp_password: bool
    email: bool
    userId: bool


class EmailAccountNumberAggregateInput(TypedDict, total=False):
    """EmailAccount input for aggregating numbers"""
    port: bool


EmailAccountAvgAggregateInput = EmailAccountNumberAggregateInput
EmailAccountSumAggregateInput = EmailAccountNumberAggregateInput


EmailAccountCountAggregateInput = TypedDict(
    'EmailAccountCountAggregateInput',
    {
        'id': bool,
        'port': bool,
        'stmp_server': bool,
        'smtp_username': bool,
        'smtp_password': bool,
        'email': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

EmailAccountCountAggregateOutput = TypedDict(
    'EmailAccountCountAggregateOutput',
    {
        'id': int,
        'port': int,
        'stmp_server': int,
        'smtp_username': int,
        'smtp_password': int,
        'email': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


EmailAccountKeys = Literal[
    'id',
    'port',
    'stmp_server',
    'smtp_username',
    'smtp_password',
    'email',
    'userId',
    'user',
]
EmailAccountScalarFieldKeys = Literal[
    'id',
    'port',
    'stmp_server',
    'smtp_username',
    'smtp_password',
    'email',
    'userId',
]
EmailAccountScalarFieldKeysT = TypeVar('EmailAccountScalarFieldKeysT', bound=EmailAccountScalarFieldKeys)

EmailAccountRelationalFieldKeys = Literal[
        'user',
    ]

# Acc types

class AccOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Acc create method"""
    id: _str


class AccCreateInput(AccOptionalCreateInput):
    """Required arguments to the Acc create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Acc create method, without relations"""
    id: _str


class AccCreateWithoutRelationsInput(AccOptionalCreateWithoutRelationsInput):
    """Required arguments to the Acc create method, without relations"""
    name: _str


class AccCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccCreateWithoutRelationsInput'
    connect: 'AccWhereUniqueInput'


class AccCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccCreateWithoutRelationsInput', List['AccCreateWithoutRelationsInput']]
    connect: Union['AccWhereUniqueInput', List['AccWhereUniqueInput']]


_AccWhereUnique_id_Input = TypedDict(
    '_AccWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AccWhereUniqueInput = _AccWhereUnique_id_Input


class AccUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str


class AccUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str


class AccUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccCreateWithoutRelationsInput']
    connect: List['AccWhereUniqueInput']
    set: List['AccWhereUniqueInput']
    disconnect: List['AccWhereUniqueInput']
    delete: List['AccWhereUniqueInput']

    # TODO
    # update: List['AccUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccScalarWhereInput']
    # upsert: List['AccUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AccCreateOrConnectWithoutRelationsInput']


class AccUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccCreateWithoutRelationsInput'
    connect: 'AccWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccUpdateInput'
    # upsert: 'AccUpsertWithoutRelationsInput'
    # connectOrCreate: 'AccCreateOrConnectWithoutRelationsInput'


class AccUpsertInput(TypedDict):
    create: 'AccCreateInput'
    update: 'AccUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Acc_id_OrderByInput = TypedDict(
    '_Acc_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Acc_name_OrderByInput = TypedDict(
    '_Acc_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

AccOrderByInput = Union[
    '_Acc_id_OrderByInput',
    '_Acc_name_OrderByInput',
]



# recursive Acc types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccRelationFilter = TypedDict(
    'AccRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccInclude(TypedDict, total=False):
    """Acc relational arguments"""


    

class AccountIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive1']


class AccountIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive2']


class AccountIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive3']


class AccountIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive4']


class AccountIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class AccountArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManyAccountArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive1']


class SessionIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive2']


class SessionIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive3']


class SessionIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive4']


class SessionIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class SessionArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManySessionArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class UserIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccRecursive1']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccRecursive1']


class UserIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccRecursive2']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccRecursive2']


class UserIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccRecursive3']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccRecursive3']


class UserIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccRecursive4']
    emailAccounts: Union[bool, 'FindManyEmailAccountArgsFromAccRecursive4']


class UserIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class UserArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManyUserArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""


class VerificationTokenIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""


class VerificationTokenIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""


class VerificationTokenIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""


class VerificationTokenIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class VerificationTokenArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManyVerificationTokenArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EmailAccountIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive1']


class EmailAccountIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive2']


class EmailAccountIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive3']


class EmailAccountIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""
    user: Union[bool, 'UserArgsFromAccRecursive4']


class EmailAccountIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class EmailAccountArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class EmailAccountArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class EmailAccountArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class EmailAccountArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class EmailAccountArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManyEmailAccountArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive1'


class FindManyEmailAccountArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive2'


class FindManyEmailAccountArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive3'


class FindManyEmailAccountArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    include: 'EmailAccountIncludeFromEmailAccountRecursive4'


class FindManyEmailAccountArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['EmailAccountOrderByInput', List['EmailAccountOrderByInput']]
    where: 'EmailAccountWhereInput'
    cursor: 'EmailAccountWhereUniqueInput'
    distinct: List['EmailAccountScalarFieldKeys']
    
    

class AccIncludeFromAcc(TypedDict, total=False):
    """Relational arguments for Acc"""


class AccIncludeFromAccRecursive1(TypedDict, total=False):
    """Relational arguments for Acc"""


class AccIncludeFromAccRecursive2(TypedDict, total=False):
    """Relational arguments for Acc"""


class AccIncludeFromAccRecursive3(TypedDict, total=False):
    """Relational arguments for Acc"""


class AccIncludeFromAccRecursive4(TypedDict, total=False):
    """Relational arguments for Acc"""

    

class AccArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccIncludeFromAccRecursive1'


class AccArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccIncludeFromAccRecursive2'


class AccArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccIncludeFromAccRecursive3'


class AccArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    include: 'AccIncludeFromAccRecursive4'


class AccArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    
    

class FindManyAccArgsFromAcc(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive1'


class FindManyAccArgsFromAccRecursive1(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive2'


class FindManyAccArgsFromAccRecursive2(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive3'


class FindManyAccArgsFromAccRecursive3(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    include: 'AccIncludeFromAccRecursive4'


class FindManyAccArgsFromAccRecursive4(TypedDict, total=False):
    """Arguments for Acc"""
    take: int
    skip: int
    order_by: Union['AccOrderByInput', List['AccOrderByInput']]
    where: 'AccWhereInput'
    cursor: 'AccWhereUniqueInput'
    distinct: List['AccScalarFieldKeys']
    


FindManyAccArgs = FindManyAccArgsFromAcc
FindFirstAccArgs = FindManyAccArgsFromAcc


    

class AccWhereInput(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AccWhereInputRecursive1', List['AccWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccWhereInputRecursive1']
    OR: List['AccWhereInputRecursive1']
    NOT: List['AccWhereInputRecursive1']


class AccWhereInputRecursive1(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AccWhereInputRecursive2', List['AccWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccWhereInputRecursive2']
    OR: List['AccWhereInputRecursive2']
    NOT: List['AccWhereInputRecursive2']


class AccWhereInputRecursive2(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AccWhereInputRecursive3', List['AccWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccWhereInputRecursive3']
    OR: List['AccWhereInputRecursive3']
    NOT: List['AccWhereInputRecursive3']


class AccWhereInputRecursive3(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AccWhereInputRecursive4', List['AccWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccWhereInputRecursive4']
    OR: List['AccWhereInputRecursive4']
    NOT: List['AccWhereInputRecursive4']


class AccWhereInputRecursive4(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']



# aggregate Acc types


    

class AccScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccScalarWhereWithAggregatesInputRecursive1']


class AccScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccScalarWhereWithAggregatesInputRecursive2']


class AccScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccScalarWhereWithAggregatesInputRecursive3']


class AccScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccScalarWhereWithAggregatesInputRecursive4']


class AccScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Acc arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class AccGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    _sum: 'AccSumAggregateOutput'
    _avg: 'AccAvgAggregateOutput'
    _min: 'AccMinAggregateOutput'
    _max: 'AccMaxAggregateOutput'
    _count: 'AccCountAggregateOutput'


class AccAvgAggregateOutput(TypedDict, total=False):
    """Acc output for aggregating averages"""


class AccSumAggregateOutput(TypedDict, total=False):
    """Acc output for aggregating sums"""


class AccScalarAggregateOutput(TypedDict, total=False):
    """Acc output including scalar fields"""
    id: _str
    name: _str


AccMinAggregateOutput = AccScalarAggregateOutput
AccMaxAggregateOutput = AccScalarAggregateOutput


class AccMaxAggregateInput(TypedDict, total=False):
    """Acc input for aggregating by max"""
    id: bool
    name: bool


class AccMinAggregateInput(TypedDict, total=False):
    """Acc input for aggregating by min"""
    id: bool
    name: bool


class AccNumberAggregateInput(TypedDict, total=False):
    """Acc input for aggregating numbers"""


AccAvgAggregateInput = AccNumberAggregateInput
AccSumAggregateInput = AccNumberAggregateInput


AccCountAggregateInput = TypedDict(
    'AccCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

AccCountAggregateOutput = TypedDict(
    'AccCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


AccKeys = Literal[
    'id',
    'name',
]
AccScalarFieldKeys = Literal[
    'id',
    'name',
]
AccScalarFieldKeysT = TypeVar('AccScalarFieldKeysT', bound=AccScalarFieldKeys)

AccRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields